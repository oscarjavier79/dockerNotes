#################################################################################



docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag

docker run -p 3306:3306 -d --name=docker-mysql --env="MYSQL_ROOT_PASSWORD=root" -e "MYSQL_PASSWORD=root" -e "MYSQL_DATABASE=test" mysql

#############################################################################################

settear puertos al contenedor


    stop running container

    docker stop test01

    commit the container

    docker commit test01 test02

    NOTE: The above, test02 is a new image that I'm constructing from the test01 container.

    re-run from the commited image

    docker run -p 8080:8080 -td test02
	
	
	conectar al contenedor de mysql
	docker exec -t -i <container_name> /bin/bash
	mysql -u “<useranme>” -p

#################################################################################################

1) crear cuenta en AWS Amazon. com
2) launch instance
3) seleccionar amazon linux AMI (Amazon machine image)
4) seleccionar tipo de instancia
5) add rule http : 80
6) review and launch
7) launch
8) crear nuevo key pair y asignar cualquier nombre

ya en consola desde ssh -i fileRSADescargado user@ip
sudo yum update -y

instalar docker
sudo yum install -y docker

iniciar docker
sudo service docker start

iniciar docker cada reinicio
sudo chkconfig docker on

agregar usuario a grupo docker
sudo usermod -a -G docker usuario

listar conteneddores que se estan ejecutando 
docker ps

listar todos los contenedores
docker ps -a

listar imagenes
docker image

eliminar imagenes con sus contenedores
docker rmi -f imagen:tag

generar imagen desde contenedor
docker commit idContenedor nombreusuario/nombreimagen

tambien se genera pasando el nombre
docker commit nombrecontenedor nombreusuario/nombreimagen

generar un tag para subir la imagen a docker hub
docker tab nombre/usuarionombreimagen nobreusuario/nombreimagendeseado

logearse en docker hub desde terminal
docker login

para subir imagen en docker hub
docker push usuario/nombreimagen

listar redes activas
docker network ls

mostrar propiedades de red 
docker network inspect nombrered

crear nueva red
docker network create nombrered

eliminar contenedor de la red
docker network disconnect nombrered nombrecontenedor

agregar contenedor a la red
docker network connect nombrered nombrecontenedor

configurar servidor web apache
buscar imagen httpd en docker hub

asignar directorio para poner paginas web en contenedor apache
docker run --name apacheServer -p 9080:80 -v /home/ozjavier/Documents/:/usr/local/apache2/htdocs -d httpd:latest

entrar en el contenedor ubuntu
docker run -it nombreImagen:tag /bin/bash

iniciar servicio docker
sudo systemctl start docker

cambiar ips contenedores docker
docker network create --driver=bridge --subnet=192.168.0.0/24 nameNetwork
docker network connect nameNetwork containerName
docker start containerName

dockerfile
FROM <-- define imagen base
MAINTAINER <-- creador del contenedor
RUN <-- nos permite ejecutar comandos en la imagen antes de ser creada
ADD/COPY <-- agregar o copiar archivos desde el equipo local a la imagen
EXPOSE <-- expone por defecto un puerto del contenedor
CMD <-- ejecutar un comando por defecto al crear el contenedor

ejecutar dockerfile
docker build -t nombreImagen rutaDockerFile


###############################################################################################################################
ORACLE DOCKER

starting oracle
docker run -d -it --name oracleDB -p 1521:1521 -p 5500:5500 -e ORACLE_PWD=qqqqqq -v /home/oscarjavier/tools/oracle:/opt/oracle/oradata oraclelinux:latest

connect to container
docker exec -it oracle /bin/bash

conect in contaianer to sqlplus
sqlplus system/LetsDocker@ORCLPDB1

###############################################################################################################################
https://medium.com/omarelgabrys-blog/microservices-with-spring-boot-intro-to-microservices-part-1-c0d24cd422c3
https://dzone.com/articles/buiding-microservice-using-spring-boot-and-docker?fromrel=true
https://dwmkerr.com/learn-docker-by-building-a-microservice/
https://springbootdev.com/2017/11/30/docker-spring-boot-and-spring-data-jpa-mysql-rest-api-example-with-docker-without-docker-compose/
url: ${HOST}/my-page
https://stormpath.com/blog/microservices-jwt-spring-boot



############################################################################################################

MAVEN
<properties>
		<java.version>1.8</java.version>
		<docker.image.prefix>login-service</docker.image.prefix>
	</properties>


<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.2.3</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
			
			
-----------------------------------------------------------------------------------------------------------------------	
			
			
execute command maven
mvn package docker:build

create container
docker run -p 8091:8091 -t login-service/login-service


---------------------------------------------------------------------------------

FROM java:8
VOLUME /tmp
ADD src/main/docker/login-service-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]



---------------------------------------------------------------------------------
create file with name dockerfile
copy jar to location of dockerfile

FROM java:8
LABEL maintainer="OscarJavier"
VOLUME /tmp
EXPOSE 8092
ARG JAR_FILE=/survey-service-0.0.1-SNAPSHOT.jar
ADD ${JAR_FILE} survey-service.jar
RUN bash -c 'touch /survey-service.jar'
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/survey-service.jar"]


execute

sudo docker image build -t survey-service . -f dockerfile


